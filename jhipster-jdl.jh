
// entities

/**
 * Product sold by the online-store
 */
entity Product (product) {
  name String required,
  description String,
  price BigDecimal required min(0),
  size Size required,
  image ImageBlob
}
entity ProductCategory (product_category) {
  name String required,
  description String
}
entity Customer (customer) {
  firstName String,
  lastName String required,
  gender Gender required,
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
  phone String required,
  addressLine1 String required,
  addressLine2 String,
  city String required,
  country String required
}
entity ProductOrder (product_order) {
  placedDate Instant required,
  status OrderStatus required,
  code String required
}
entity OrderItem (order_item) {
  quantity Integer required min(0),
  totalPrice BigDecimal required min(0),
  status OrderItemStatus required
}
entity Invoice (invoice) {
  date Instant required,
  details String,
  status InvoiceStatus required,
  paymentMethod PaymentMethod required,
  paymentDate Instant required,
  paymentAmount BigDecimal required,
  code String required
}
entity Shipment (shipment) {
  trackingCode String,
  date Instant required,
  details String
}

enum Size {
  S,
  M,
  L,
  XL,
  XXL
}

enum Gender {
  MALE,
  FEMALE,
  OTHER
}

enum OrderStatus {
  COMPLETED,
  PENDING,
  CANCELLED
}

enum OrderItemStatus {
  AVAILABLE,
  OUT_OF_STOCK,
  BACK_ORDER
}

enum InvoiceStatus {
  PAID,
  ISSUED,
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD,
  CASH_ON_DELIVERY,
  PAYPAL
}


// relationships
// general usage:
// relationship <type>
//	{ <from_entity> }[{ <relationship_name> [( <display_field> )] <validation>* }]
//  to
//  { <to_entity> }[{ <relationship_name> [( <display_field> )] <validation>* }]
// where <from_entity> is the name of the owner entity of the relationship or the source
// and <to_entity> is the destination of the relationship

/** Unidirectional OneToOne-relationship Customer (1) ---> (1) User:
*	the Customer knows about the User and is the owner
*	of the relationship, but the User doesn't know about
*	the Customer. Hence you will not be able to obtain
*	customers from a User.
*/
relationship OneToOne {
  Customer{user(login) required} to User
}

/** Unidirectional ManyToOne-relationship OrderItem (*) ---> (1) Product:
*	a product don't needs orderItems, but
*	orderItems need a product
*	(for a clean design, we don't want to know which orders have been 
*	made for a product - in the future, the relationship could be
*	made bi-directional e.g. for counting orders for a product)
*/
relationship ManyToOne {
  OrderItem{product(name) required} to Product
}

/** Bi-directional OneToMany:
*	source entity			destination entity
*	Customer (1)      	---> (*) ProductOrder
*	ProductOrder (1)  	---> (*) OrderItem
*	ProductOrder (1)  	---> (*) Invoice
*	Invoice (1)		  	---> (*) Shipment
*	ProductCategory (1)	---> (*) Product
*
*	A Customer can have multiple ProductOrders, ProductOrder can
*	have multiple OrderItems and Invoices, Invoice can have
*	many Shipment and ProductCategory can have many Products.
*
*	From the destination entity, the source entities are mapped
*	as ManyToOne.
*/
relationship OneToMany {
  ProductCategory{product} to Product{productCategory(name)},
  Customer{order} to ProductOrder{customer(email) required},
  ProductOrder{orderItem} to OrderItem{order(code) required},
  ProductOrder{invoice} to Invoice{order(code) required},
  Invoice{shipment} to Shipment{invoice(code) required}
}

// options for entities

dto * with mapstruct
service * with serviceImpl
paginate Product, Customer, ProductOrder, OrderItem, Invoice, Shipment with pagination
filter *
