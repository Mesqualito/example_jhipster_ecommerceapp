
// entities

/** Product sold by the online-store */
entity Product {
	name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}

enum Size {
	S, M, L, XL, XXL
}

entity ProductCategory {
	name String required
    description String
}

entity Customer {
	firstName String
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
	MALE, FEMALE, OTHER
}

entity ProductOrder {
	placedDate Instant required
    status OrderStatus required
    code String required
}

enum OrderStatus {
	COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
	quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
	AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

entity Invoice {
	date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
	PAID, ISSUED, CANCELLED
}

enum PaymentMethod {
	CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

entity Shipment {
	trackingCode String
    date Instant required
    details String
}

// relationships

/** Unidirectional OneToOne-relationship Customer (1) ---> (1) User:
*	the Customer knows about the User and is the owner
*	of the relationship, but the User doesn't know about
*	the Customer. Hence you will not be able to obtain
*	customers from a User.
*/
relationship OneToOne {
	Customer{user} to User
}

/** Unidirectional ManyToOne-relationship OrderItem (*) ---> (1) Product:
*	a product don't needs orderItems, but
*	orderItems need a product
*	(for a clean design, we don't want to know which orders have been 
*	made for a product - in the future, the relationship could be
*	made bi-directional e.g. for counting orders for a product)
*/
relationship ManyToOne {
	OrderItem{product} to Product
}

/** Bi-directional OneToMany:
*	source entity			destination entity
*	Customer (1)      	---> (*) ProductOrder
*	ProductOrder (1)  	---> (*) OrderItem
*	ProductOrder (1)  	---> (*) Invoice
*	Invoice (1)		  	---> (*) Shipment
*	ProductCategory (1)	---> (*) Product
*
*	A Customer can have multiple ProductOrders, ProductOrder can
*	have multiple OrderItems and Invoices, Invoice can have
*	many Shipment and ProductCategory can have many Products.
*
*	From the destination entity, the source entities are mapped
*	as ManyToOne.
*/
relationship OneToMany {
	Customer{order} to ProductOrder{customer},
    ProductOrder{orderItem} to OrderItem{order},
    ProductOrder{invoice} to Invoice{order},
    Invoice{shipment} to Shipment{invoice},
    ProductCategory{product} to Product{productCategory}
}

// options for entities

service * with serviceClass
paginate Product, Customer, ProductOrder, Invoice, Shipment, OrderItem with pagination